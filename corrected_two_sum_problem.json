{
  "title": "Two Sum",
  "slug": "two-sum",
  "difficulty": "Easy",
  "description": "Given an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target.",
  "input_format": "Line 1: JSON array of integers (nums)\nLine 2: Integer (target)",
  "output_format": "JSON array of two integers representing the indices",
  "constraints": "2 <= nums.length <= 10^4; -10^9 <= nums[i] <= 10^9; -10^9 <= target <= 10^9; Exactly one valid answer exists.",
  "topics": [
    "Array",
    "Hash Map"
  ],
  "companies": [
    "Amazon",
    "Google",
    "Bloomberg"
  ],
  "examples": [
    {
      "input": "nums = [2,7,11,15], target = 9",
      "output": "[0,1]",
      "explanation": "Because nums[0] + nums[1] == 9, we return [0,1]."
    }
  ],
  "boilerplates": {
    "python": "def solution(nums, target):\n    # Write your code here\n    pass",
    "java": "class Solution {\n    public int[] solution(int[] nums, int target) {\n        // Write your code here\n        return new int[0];\n    }\n}",
    "cpp": "class Solution {\npublic:\n    vector<int> solution(vector<int>& nums, int target) {\n        // Write your code here\n        return {};\n    }\n};"
  },
  "wrapper_code": {
    "python": "import sys\\nimport json\\nfrom typing import List\\n\\n{{USER_CODE}}\\n\\nif __name__ == \\\"__main__\\\":\\n    input_data = sys.stdin.read().strip()\\n    \\n    {{INPUT_PARSING}}\\n    \\n    result = solution(nums, target)\\n    \\n    {{OUTPUT_FORMATTING}}\\n    \\n    print(formatted_result)",
    "java": "import java.util.*;\nimport java.io.*;\n\n{{USER_CODE}}\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        \n        {{INPUT_PARSING}}\n        \n        Solution sol = new Solution();\n        int[] result = sol.solution(nums, target);\n        \n        {{OUTPUT_FORMATTING}}\n        \n        System.out.println(formattedResult);\n    }\n}",
    "cpp": "#include <bits/stdc++.h>\nusing namespace std;\n\n{{USER_CODE}}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    \n    {{INPUT_PARSING}}\n    \n    Solution sol;\n    vector<int> result = sol.solution(nums, target);\n    \n    {{OUTPUT_FORMATTING}}\n    \n    cout << formatted_result << endl;\n    \n    return 0;\n}"
  },
  "function_name": "solution",
  "function_signature": {
    "python": "def solution(nums: List[int], target: int) -> List[int]",
    "java": "public int[] solution(int[] nums, int target)",
    "cpp": "vector<int> solution(vector<int>& nums, int target)"
  },
  "input_parsing": {
    "python": "lines = input_data.strip().split('\\n')\nnums = json.loads(lines[0])\ntarget = int(lines[1])",
    "java": "String numsLine = br.readLine();\nString targetLine = br.readLine();\nint[] nums = Arrays.stream(numsLine.replaceAll(\"[\\\\[\\\\]]\", \"\").split(\",\")).mapToInt(s -> Integer.parseInt(s.trim())).toArray();\nint target = Integer.parseInt(targetLine);",
    "cpp": "string line;\ngetline(cin, line);\nstringstream ss(line);\nvector<int> nums;\nstring num;\nwhile (getline(ss, num, ',')) {\n    nums.push_back(stoi(num));\n}\ngetline(cin, line);\nint target = stoi(line);"
  },
  "output_formatting": {
    "python": "formatted_result = json.dumps(result)",
    "java": "String formattedResult = Arrays.toString(result);",
    "cpp": "string formatted_result = \"[\";\nfor(int i = 0; i < result.size(); i++) {\n    if(i > 0) formatted_result += \",\";\n    formatted_result += to_string(result[i]);\n}\nformatted_result += \"]\";"
  }
}